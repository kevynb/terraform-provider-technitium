// Code generated by mockery v2.39.1. DO NOT EDIT.

package model

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockDNSApiClient is an autogenerated mock type for the DNSApiClient type
type MockDNSApiClient struct {
	mock.Mock
}

type MockDNSApiClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDNSApiClient) EXPECT() *MockDNSApiClient_Expecter {
	return &MockDNSApiClient_Expecter{mock: &_m.Mock}
}

// AddRecords provides a mock function with given fields: ctx, domain, records
func (_m *MockDNSApiClient) AddRecords(ctx context.Context, domain DNSDomain, records []DNSRecord) error {
	ret := _m.Called(ctx, domain, records)

	if len(ret) == 0 {
		panic("no return value specified for AddRecords")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DNSDomain, []DNSRecord) error); ok {
		r0 = rf(ctx, domain, records)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDNSApiClient_AddRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddRecords'
type MockDNSApiClient_AddRecords_Call struct {
	*mock.Call
}

// AddRecords is a helper method to define mock.On call
//   - ctx context.Context
//   - domain DNSDomain
//   - records []DNSRecord
func (_e *MockDNSApiClient_Expecter) AddRecords(ctx interface{}, domain interface{}, records interface{}) *MockDNSApiClient_AddRecords_Call {
	return &MockDNSApiClient_AddRecords_Call{Call: _e.mock.On("AddRecords", ctx, domain, records)}
}

func (_c *MockDNSApiClient_AddRecords_Call) Run(run func(ctx context.Context, domain DNSDomain, records []DNSRecord)) *MockDNSApiClient_AddRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DNSDomain), args[2].([]DNSRecord))
	})
	return _c
}

func (_c *MockDNSApiClient_AddRecords_Call) Return(_a0 error) *MockDNSApiClient_AddRecords_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDNSApiClient_AddRecords_Call) RunAndReturn(run func(context.Context, DNSDomain, []DNSRecord) error) *MockDNSApiClient_AddRecords_Call {
	_c.Call.Return(run)
	return _c
}

// DelRecords provides a mock function with given fields: ctx, domain, rType, rName
func (_m *MockDNSApiClient) DelRecords(ctx context.Context, domain DNSDomain, rType DNSRecordType, rName DNSRecordName) error {
	ret := _m.Called(ctx, domain, rType, rName)

	if len(ret) == 0 {
		panic("no return value specified for DelRecords")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DNSDomain, DNSRecordType, DNSRecordName) error); ok {
		r0 = rf(ctx, domain, rType, rName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDNSApiClient_DelRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelRecords'
type MockDNSApiClient_DelRecords_Call struct {
	*mock.Call
}

// DelRecords is a helper method to define mock.On call
//   - ctx context.Context
//   - domain DNSDomain
//   - rType DNSRecordType
//   - rName DNSRecordName
func (_e *MockDNSApiClient_Expecter) DelRecords(ctx interface{}, domain interface{}, rType interface{}, rName interface{}) *MockDNSApiClient_DelRecords_Call {
	return &MockDNSApiClient_DelRecords_Call{Call: _e.mock.On("DelRecords", ctx, domain, rType, rName)}
}

func (_c *MockDNSApiClient_DelRecords_Call) Run(run func(ctx context.Context, domain DNSDomain, rType DNSRecordType, rName DNSRecordName)) *MockDNSApiClient_DelRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DNSDomain), args[2].(DNSRecordType), args[3].(DNSRecordName))
	})
	return _c
}

func (_c *MockDNSApiClient_DelRecords_Call) Return(_a0 error) *MockDNSApiClient_DelRecords_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDNSApiClient_DelRecords_Call) RunAndReturn(run func(context.Context, DNSDomain, DNSRecordType, DNSRecordName) error) *MockDNSApiClient_DelRecords_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecords provides a mock function with given fields: ctx, domain, rType, rName
func (_m *MockDNSApiClient) GetRecords(ctx context.Context, domain DNSDomain, rType DNSRecordType, rName DNSRecordName) ([]DNSRecord, error) {
	ret := _m.Called(ctx, domain, rType, rName)

	if len(ret) == 0 {
		panic("no return value specified for GetRecords")
	}

	var r0 []DNSRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, DNSDomain, DNSRecordType, DNSRecordName) ([]DNSRecord, error)); ok {
		return rf(ctx, domain, rType, rName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, DNSDomain, DNSRecordType, DNSRecordName) []DNSRecord); ok {
		r0 = rf(ctx, domain, rType, rName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DNSRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, DNSDomain, DNSRecordType, DNSRecordName) error); ok {
		r1 = rf(ctx, domain, rType, rName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDNSApiClient_GetRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecords'
type MockDNSApiClient_GetRecords_Call struct {
	*mock.Call
}

// GetRecords is a helper method to define mock.On call
//   - ctx context.Context
//   - domain DNSDomain
//   - rType DNSRecordType
//   - rName DNSRecordName
func (_e *MockDNSApiClient_Expecter) GetRecords(ctx interface{}, domain interface{}, rType interface{}, rName interface{}) *MockDNSApiClient_GetRecords_Call {
	return &MockDNSApiClient_GetRecords_Call{Call: _e.mock.On("GetRecords", ctx, domain, rType, rName)}
}

func (_c *MockDNSApiClient_GetRecords_Call) Run(run func(ctx context.Context, domain DNSDomain, rType DNSRecordType, rName DNSRecordName)) *MockDNSApiClient_GetRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DNSDomain), args[2].(DNSRecordType), args[3].(DNSRecordName))
	})
	return _c
}

func (_c *MockDNSApiClient_GetRecords_Call) Return(_a0 []DNSRecord, _a1 error) *MockDNSApiClient_GetRecords_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDNSApiClient_GetRecords_Call) RunAndReturn(run func(context.Context, DNSDomain, DNSRecordType, DNSRecordName) ([]DNSRecord, error)) *MockDNSApiClient_GetRecords_Call {
	_c.Call.Return(run)
	return _c
}

// SetRecords provides a mock function with given fields: ctx, domain, rType, rName, records
func (_m *MockDNSApiClient) SetRecords(ctx context.Context, domain DNSDomain, rType DNSRecordType, rName DNSRecordName, records []DNSUpdateRecord) error {
	ret := _m.Called(ctx, domain, rType, rName, records)

	if len(ret) == 0 {
		panic("no return value specified for SetRecords")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, DNSDomain, DNSRecordType, DNSRecordName, []DNSUpdateRecord) error); ok {
		r0 = rf(ctx, domain, rType, rName, records)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDNSApiClient_SetRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRecords'
type MockDNSApiClient_SetRecords_Call struct {
	*mock.Call
}

// SetRecords is a helper method to define mock.On call
//   - ctx context.Context
//   - domain DNSDomain
//   - rType DNSRecordType
//   - rName DNSRecordName
//   - records []DNSUpdateRecord
func (_e *MockDNSApiClient_Expecter) SetRecords(ctx interface{}, domain interface{}, rType interface{}, rName interface{}, records interface{}) *MockDNSApiClient_SetRecords_Call {
	return &MockDNSApiClient_SetRecords_Call{Call: _e.mock.On("SetRecords", ctx, domain, rType, rName, records)}
}

func (_c *MockDNSApiClient_SetRecords_Call) Run(run func(ctx context.Context, domain DNSDomain, rType DNSRecordType, rName DNSRecordName, records []DNSUpdateRecord)) *MockDNSApiClient_SetRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(DNSDomain), args[2].(DNSRecordType), args[3].(DNSRecordName), args[4].([]DNSUpdateRecord))
	})
	return _c
}

func (_c *MockDNSApiClient_SetRecords_Call) Return(_a0 error) *MockDNSApiClient_SetRecords_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDNSApiClient_SetRecords_Call) RunAndReturn(run func(context.Context, DNSDomain, DNSRecordType, DNSRecordName, []DNSUpdateRecord) error) *MockDNSApiClient_SetRecords_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDNSApiClient creates a new instance of MockDNSApiClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDNSApiClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDNSApiClient {
	mock := &MockDNSApiClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
